1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "mobsf.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "mobsf.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "mobsf.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "mobsf.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if .Values.scan }}
## secureCodeBox Integration

This MobSF deployment includes secureCodeBox integration with the following components:

### ScanType Custom Resource Definition
A MobSF ScanType has been created that can be used to run mobile application security scans.

### Usage Examples

1. **Create a basic scan:**
   ```bash
   kubectl apply -f - <<EOF
   apiVersion: execution.securecodebox.io/v1
   kind: Scan
   metadata:
     name: mobsf-scan-example
   spec:
     scanType: mobsf
     parameters:
       - name: APK_OBJECT
         value: "my-app.apk"
   EOF
   ```

2. **Check scan status:**
   ```bash
   kubectl get scans
   kubectl describe scan mobsf-scan-example
   ```

3. **View scan results:**
   ```bash
   kubectl get scans mobsf-scan-example -o yaml
   ```

### Configuration
The scan configuration can be customized in the `values.yaml` file under the `scan` section:
- `scan.apkObject`: Default APK object name in MinIO bucket
- `scan.scannerImage`: Scanner image configuration
- `scan.minio`: MinIO connection settings

### Prerequisites
- secureCodeBox operator must be installed in the cluster
- MinIO must be configured and accessible
- APK files must be uploaded to the configured MinIO bucket
{{- end }}
